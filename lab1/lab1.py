import numpy as np

def is_inverse_correct(A, A_inv):
    identity = np.eye(len(A))
    return np.allclose(np.dot(A, A_inv), identity)

def update_inverse(A, A_inv, x, i):
    try:
        print("\n–®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º ‚Ñì = A^(-1) * x")
        l = np.dot(A_inv, x)
        print("‚Ñì =", l)
        
        if np.isclose(l[i], 0):
            print("–ú–∞—Ç—Ä–∏—Ü–∞ A' –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞.")
            return None  
        
        print("\n–®–∞–≥ 2: –ó–∞–º–µ–Ω—è–µ–º i-–π —ç–ª–µ–º–µ–Ω—Ç ‚Ñì –Ω–∞ -1")
        l_ = l.copy()
        l_[i] = -1
        print("–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –≤–µ–∫—Ç–æ—Ä ‚Ñì* =", l)
        
        print("\n–®–∞–≥ 3: –ù–∞—Ö–æ–¥–∏–º ùëô^ = -1/‚Ñì[i] * ‚Ñì*")
        l_hat = -l_ / l[i]
        print("ùëôÃÇ =", l_hat)
        
        print("\n–®–∞–≥ 4: –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Ç—Ä–∏—Ü—É Q")
        Q = np.eye(len(A))
        Q[:, i] = l_hat
        print("Q =\n", Q)
        
        print("\n–®–∞–≥ 5: –í—ã—á–∏—Å–ª—è–µ–º A'^{-1} = Q * A^{-1}")
        A_new_inv = np.dot(Q, A_inv)
        print("–ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A'^{-1} =\n", A_new_inv)
        
        return A_new_inv
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã:", e)
        return None

def safe_input_matrix(n, prompt):
    while True:
        try:
            print(prompt)
            matrix = np.array([list(map(float, input().split())) for _ in range(n)])
            if matrix.shape != (n, n):
                raise ValueError("–ú–∞—Ç—Ä–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π.")
            return matrix
        except ValueError as e:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:", e, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def safe_input_vector(n, prompt):
    while True:
        try:
            print(prompt)
            vector = np.array(list(map(float, input().split())))
            if vector.shape != (n,):
                raise ValueError("–í–µ–∫—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ {} —ç–ª–µ–º–µ–Ω—Ç–æ–≤.".format(n))
            return vector
        except ValueError as e:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:", e, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def safe_input_index(n, prompt):
    while True:
        try:
            index = int(input(prompt))
            if not (0 <= index < n):
                raise ValueError("–ò–Ω–¥–µ–∫—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ {}".format(n - 1))
            return index
        except ValueError as e:
            print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:", e, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

n = int(input("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –º–∞—Ç—Ä–∏—Ü—ã: "))
A = safe_input_matrix(n, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É A:")
A_inv = safe_input_matrix(n, "–í–≤–µ–¥–∏—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É A^{-1}:")

if not is_inverse_correct(A, A_inv):
    print("–í–≤–µ–¥–µ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ A^{-1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ–π –¥–ª—è A. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.")
else:
    x = safe_input_vector(n, "–í–≤–µ–¥–∏—Ç–µ –≤–µ–∫—Ç–æ—Ä x:")
    i = safe_input_index(n, "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–¥–µ–∫—Å –∑–∞–º–µ–Ω—è–µ–º–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0): ")
    
    update_inverse(A, A_inv, x, i)
